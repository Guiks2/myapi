{
    "swagger": "2.0",
    "info": {
        "title": "Ma premi\u00e8re API",
        "description": "Une API permettant l'acc\u00e8s aux donn\u00e9es de la base via une approche RESTful",
        "termsOfService": "",
        "contact": {
            "name": "Guiks",
            "email": "guillaume.delapre@gmail.com"
        },
        "version": "1.0.0"
    },
    "host": "myapi.com",
    "basePath": "/",
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/abonnement": {
            "get": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Get subscription list",
                "description": "Use this method to return a listing of subscriptions.",
                "operationId": "indexAbonnement",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Abonnement"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Create a subscription",
                "description": "Use this method to create a new subscription.",
                "operationId": "storeAbonnement",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_forfait",
                        "in": "formData",
                        "description": "Forfait ID",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "debut",
                        "in": "formData",
                        "description": "Initial date",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You're not allowed to access this service."
                    },
                    "201": {
                        "description": "Subscription created",
                        "schema": {
                            "$ref": "#/definitions/Abonnement"
                        }
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            }
        },
        "/abonnement/{id_abonnement}": {
            "get": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Display a subscription",
                "description": "Use this method to return a single subscription attributes based on its id.",
                "operationId": "showAbonnement",
                "parameters": [
                    {
                        "name": "id_abonnement",
                        "in": "path",
                        "description": "Subscription ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Abonnement"
                        }
                    },
                    "404": {
                        "description": "Subscription not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Update a subscription",
                "description": "Use this method to update the attributes of a subscription based on its id.",
                "operationId": "updateAbonnement",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_abonnement",
                        "in": "path",
                        "description": "Subscription ID",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_forfait",
                        "in": "formData",
                        "description": "Forfait ID",
                        "type": "integer"
                    },
                    {
                        "name": "debut",
                        "in": "formData",
                        "description": "Starting date",
                        "type": "string"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You're not allowed to access this service."
                    },
                    "200": {
                        "description": "Subscription updated",
                        "schema": {
                            "$ref": "#/definitions/Abonnement"
                        }
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            },
            "delete": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Delete a subscription",
                "description": "Use this method to delete a subscription based on its id.",
                "operationId": "destroyAbonnement",
                "parameters": [
                    {
                        "name": "id_abonnement",
                        "in": "path",
                        "description": "Subscription ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You're not allowed to access this service."
                    },
                    "200": {
                        "description": "Subscription deleted"
                    },
                    "404": {
                        "description": "Subscription not found"
                    }
                }
            }
        },
        "/distributeur": {
            "get": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Display a listing of distributors.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Distributeur"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Create a distributor",
                "description": "Use this method to create a distributor",
                "operationId": "createDistributor",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom du distributeur",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "Adresse du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "Code postal du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "Ville du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "Pays du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "telephone",
                        "in": "formData",
                        "description": "T\u00e9l\u00e9phone du distributeur",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Distributor created",
                        "schema": {
                            "$ref": "#/definitions/Distributeur"
                        }
                    },
                    "422": {
                        "description": "Champs manquant obligatoire ou incorrect"
                    }
                }
            }
        },
        "/distributeur/{id_distributeur}": {
            "get": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Display a single distributor",
                "description": "Use this method to return a single distributor attributes based on its id.",
                "operationId": "showDistributor",
                "parameters": [
                    {
                        "name": "id_distributeur",
                        "in": "path",
                        "description": "id of distributeur to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Distributeur"
                        }
                    },
                    "404": {
                        "description": "Distributeur not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Update a distributor",
                "description": "Use this method to update the attributes of a distributor based on its id.",
                "operationId": "updateDistributor",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_distributeur",
                        "in": "path",
                        "description": "ID distributor",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "Adresse du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "Code postal du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "Ville du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "Pays du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "telephone",
                        "in": "formData",
                        "description": "T\u00e9l\u00e9phone du distributeur",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Distributor updated",
                        "schema": {
                            "$ref": "#/definitions/Distributeur"
                        }
                    },
                    "422": {
                        "description": "Champs manquants obligatoires ou incorrects"
                    }
                }
            },
            "delete": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Delete a distributor",
                "description": "Use this method to delete a distributor based on its id.",
                "operationId": "deleteDistributor",
                "parameters": [
                    {
                        "name": "id_distributeur",
                        "in": "path",
                        "description": "Distributor ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Distributor deleted"
                    },
                    "404": {
                        "description": "Invalid distributor value"
                    }
                }
            }
        },
        "/film": {
            "get": {
                "tags": [
                    "film"
                ],
                "summary": "Get a movie list",
                "description": "Use this method to return a listing of all movies.",
                "operationId": "indexFilm",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Film"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "film"
                ],
                "summary": "Create a film",
                "description": "Use this method to create a new movie.",
                "operationId": "storeFilm",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "formData",
                        "description": "Genre ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "id_distributeur",
                        "in": "formData",
                        "description": "Distributor ID",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "titre",
                        "in": "formData",
                        "description": "Name of the movie",
                        "required": true,
                        "type": "string",
                        "format": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "resum",
                        "in": "formData",
                        "description": "Resume of the movie",
                        "type": "string",
                        "format": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "date_debut_affiche",
                        "in": "formData",
                        "description": "Starting date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "date_fin_affiche",
                        "in": "formData",
                        "description": "Ending date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "duree_minutes",
                        "in": "formData",
                        "description": "Duration",
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "annee_production",
                        "in": "formData",
                        "description": "Production year",
                        "type": "integer",
                        "format": "int64",
                        "maximum": "4"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Film created",
                        "schema": {
                            "$ref": "#/definitions/Film"
                        }
                    },
                    "403": {
                        "description": "Permission required"
                    },
                    "422": {
                        "description": "Missing or incorrect field"
                    }
                }
            }
        },
        "/film/{id_film}": {
            "get": {
                "tags": [
                    "film"
                ],
                "summary": "Display a single movie",
                "description": "Use this method to return a single movie attributes based on its id.",
                "operationId": "showFilm",
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Movie ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Film"
                        }
                    },
                    "404": {
                        "description": "Movie not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "film"
                ],
                "summary": "Update a movie",
                "description": "Use this method to update the attributes of a movie based on its id.",
                "operationId": "updateFilm",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Movie ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "id_genre",
                        "in": "formData",
                        "description": "Genre ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_distributeur",
                        "in": "formData",
                        "description": "Distributor ID",
                        "type": "integer"
                    },
                    {
                        "name": "titre",
                        "in": "formData",
                        "description": "Name of the movie",
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "resum",
                        "in": "formData",
                        "description": "Resume of the movie",
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "date_debut_affiche",
                        "in": "formData",
                        "description": "Starting date",
                        "type": "string"
                    },
                    {
                        "name": "date_fin_affiche",
                        "in": "formData",
                        "description": "Ending date",
                        "type": "string"
                    },
                    {
                        "name": "duree_minutes",
                        "in": "formData",
                        "description": "Duration",
                        "type": "integer"
                    },
                    {
                        "name": "annee_production",
                        "in": "formData",
                        "description": "Production year",
                        "type": "integer",
                        "maximum": "4"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Film updated",
                        "schema": {
                            "$ref": "#/definitions/Film"
                        }
                    },
                    "404": {
                        "description": "Movie not found"
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            },
            "delete": {
                "tags": [
                    "film"
                ],
                "summary": "Delete a film",
                "description": "Use this method to delete a movie based on its id.",
                "operationId": "destroyFilm",
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Movie ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie deleted"
                    },
                    "403": {
                        "description": "Permission required"
                    },
                    "404": {
                        "description": "Movie not found"
                    }
                }
            }
        },
        "/film/distributeur/{id_distributeur}": {
            "get": {
                "tags": [
                    "film"
                ],
                "summary": "Display movies by ditributor",
                "description": "Use this method to return a listing of movies based on distributors id.",
                "operationId": "listFilmsByDistributor",
                "parameters": [
                    {
                        "name": "id_distributeur",
                        "in": "path",
                        "description": "Distributor ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Film"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    },
                    "404": {
                        "description": "Distributor not found"
                    }
                }
            }
        },
        "/film/genre/{id_genre}": {
            "get": {
                "tags": [
                    "film"
                ],
                "summary": "Display movies by genre",
                "description": "Use this method to return a listing of movies based on genre id.",
                "operationId": "listFilmsByGenre",
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "Genre ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Film"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    },
                    "404": {
                        "description": "Genre not found"
                    }
                }
            }
        },
        "/fonction": {
            "get": {
                "tags": [
                    "fonction"
                ],
                "summary": "Get function list",
                "description": "Use this method to return a listing of functions.",
                "operationId": "listFunction",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Fonction"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "fonction"
                ],
                "summary": "Create a function",
                "description": "Use this method to create a new function.",
                "operationId": "createFunction",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the function",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "salaire",
                        "in": "formData",
                        "description": "Salary of the function",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "cadre",
                        "in": "formData",
                        "description": "Salary of the function",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Function created",
                        "schema": {
                            "$ref": "#/definitions/Fonction"
                        }
                    },
                    "403": {
                        "description": "You don't have authorization for this content"
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            }
        },
        "/fonction/{id_fonction}": {
            "get": {
                "tags": [
                    "fonction"
                ],
                "summary": "Display a function",
                "description": "Use this method to return a single function attributes based on its id.",
                "operationId": "showFunction",
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "path",
                        "description": "Id of function to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Fonction"
                        }
                    },
                    "404": {
                        "description": "Function not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "fonction"
                ],
                "summary": "Update a function",
                "description": "Use this method to update the attributes of a function based on its id.",
                "operationId": "updateFunction",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "formData",
                        "description": "Name of the function",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the function",
                        "type": "string"
                    },
                    {
                        "name": "salaire",
                        "in": "formData",
                        "description": "Salary of the function",
                        "type": "string"
                    },
                    {
                        "name": "cadre",
                        "in": "formData",
                        "description": "Senior status of the function",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Function updated",
                        "schema": {
                            "$ref": "#/definitions/Fonction"
                        }
                    },
                    "403": {
                        "description": "You don't have authorization for this content"
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            },
            "delete": {
                "tags": [
                    "fonction"
                ],
                "summary": "Delete a function",
                "description": "Use this method to delete a function based on its id.",
                "operationId": "deleteFunction",
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "path",
                        "description": "Function id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "403": {
                        "description": "You don't have authorization for this content"
                    },
                    "200": {
                        "description": "Function deleted"
                    },
                    "404": {
                        "description": "Invalid function value"
                    }
                }
            }
        },
        "/genre": {
            "get": {
                "tags": [
                    "genre"
                ],
                "summary": "Display a listing of genres.",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "genre"
                ],
                "summary": "Create a genre",
                "description": "Use this method to create a genre",
                "operationId": "createGenre",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom du genre",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Genre created",
                        "schema": {
                            "$ref": "#/definitions/Genre"
                        }
                    },
                    "422": {
                        "description": "Le champ 'Nom' est obligatoire."
                    }
                }
            }
        },
        "/genre/{id_genre}": {
            "get": {
                "tags": [
                    "genre"
                ],
                "summary": "Display a single genre",
                "description": "Use this method to return a single genre attributes based on its id.",
                "operationId": "showGenre",
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "id of genre to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Genre"
                        }
                    },
                    "404": {
                        "description": "Genre not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "genre"
                ],
                "summary": "Update a genre",
                "description": "Use this method to update the attributes of a genre based on its id.",
                "operationId": "updateGenre",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "ID genre",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom du genre",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre updated",
                        "schema": {
                            "$ref": "#/definitions/Genre"
                        }
                    },
                    "422": {
                        "description": "Le champ 'Nom' est obligatoire."
                    }
                }
            },
            "delete": {
                "tags": [
                    "genre"
                ],
                "summary": "Delete a genre",
                "description": "Use this method to delete a genre based on its id.",
                "operationId": "deleteGenre",
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "Genre ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Genre deleted"
                    },
                    "404": {
                        "description": "Invalid genre ID"
                    }
                }
            }
        },
        "/historique_membre": {
            "get": {
                "tags": [
                    "historique"
                ],
                "summary": "Get a member list",
                "description": "Use this method to return a listing of historics.",
                "operationId": "listHistoric",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HistoriqueMembre"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "historique"
                ],
                "summary": "Create an historic",
                "description": "Use this method to create an historic",
                "operationId": "createHistoric",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "formData",
                        "description": "Member ID",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "id_seance",
                        "in": "formData",
                        "description": "Seance ID",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "date",
                        "in": "formData",
                        "description": "Seance date",
                        "required": true,
                        "type": "string",
                        "format": "datetime"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Historic created"
                    },
                    "422": {
                        "description": "Fields missing or incorrect."
                    }
                }
            }
        },
        "/historique_membre/{id_historique}": {
            "get": {
                "tags": [
                    "historique"
                ],
                "summary": "Find historic by ID",
                "description": "Returns a single historic",
                "operationId": "showHistoric",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_historique",
                        "in": "path",
                        "description": "ID of historic to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Historic not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "historique"
                ],
                "summary": "Delete an historic",
                "description": "Use this method to delete an historicbased on its id.",
                "operationId": "deleteHistoric",
                "parameters": [
                    {
                        "name": "id_historique",
                        "in": "path",
                        "description": "Member ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Historic deleted"
                    },
                    "404": {
                        "description": "Invalid historic value"
                    }
                }
            }
        },
        "/authenticate": {
            "post": {
                "tags": [
                    "authenticate"
                ],
                "summary": "Get authentification token",
                "description": "Use this method to return a new authentification token.",
                "operationId": "getAuthentification",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "email",
                        "in": "formData",
                        "description": "Identification email",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "password",
                        "in": "formData",
                        "description": "Identification password",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password"
                    },
                    "500": {
                        "description": "Could not create the token"
                    }
                }
            }
        },
        "/hashPassword": {
            "post": {
                "tags": [
                    "authenticate"
                ],
                "summary": "Get hashed password",
                "description": "Use this method to return a hashed password",
                "operationId": "getHashedPassword",
                "parameters": [
                    {
                        "name": "password",
                        "in": "formData",
                        "description": "Password to hash",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/membre": {
            "get": {
                "tags": [
                    "membre"
                ],
                "summary": "Get a member list",
                "description": "Use this method to return a listing of member.",
                "operationId": "listMember",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Membre"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "membre"
                ],
                "summary": "Create a member",
                "description": "Use this method to create a new member.",
                "operationId": "createMember",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "formData",
                        "description": "Person ID of the member",
                        "required": true,
                        "type": "number",
                        "maximum": "11"
                    },
                    {
                        "name": "id_abonnement",
                        "in": "formData",
                        "description": "Subscribe ID of the member",
                        "required": true,
                        "type": "number",
                        "maximum": "11"
                    },
                    {
                        "name": "date_inscription",
                        "in": "formData",
                        "description": "Inscription date of the member",
                        "required": true,
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "debut_abonnement",
                        "in": "formData",
                        "description": "Initial date of the member subscription",
                        "required": true,
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Member created",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "422": {
                        "description": "Required fields missing or incorrect"
                    }
                }
            }
        },
        "/membre/{id_membre}": {
            "get": {
                "tags": [
                    "membre"
                ],
                "summary": "Display a single member",
                "description": "Use this method to return a single member attributes based on its id.",
                "operationId": "showMember",
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "path",
                        "description": "id of member to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "404": {
                        "description": "Member not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "membre"
                ],
                "summary": "Update a member",
                "description": "Use this method to update the attributes of a member based on its id.",
                "operationId": "updateMember",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "path",
                        "description": "ID person",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "id_personne",
                        "in": "formData",
                        "description": "Person ID of the member",
                        "required": false,
                        "type": "number",
                        "maximum": "11"
                    },
                    {
                        "name": "id_abonnement",
                        "in": "formData",
                        "description": "Subscribe ID of the member",
                        "required": false,
                        "type": "number",
                        "maximum": "11"
                    },
                    {
                        "name": "date_inscription",
                        "in": "formData",
                        "description": "Inscription date of the member",
                        "required": false,
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "debut_abonnement",
                        "in": "formData",
                        "description": "Initial date of the member subscription",
                        "required": false,
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member updated",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "422": {
                        "description": "Required fields missing or incorrect"
                    }
                }
            },
            "delete": {
                "tags": [
                    "membre"
                ],
                "summary": "Delete a Member",
                "description": "Use this method to delete a member based on its id.",
                "operationId": "deleteMember",
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "path",
                        "description": "Member ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member deleted"
                    },
                    "404": {
                        "description": "Invalid member value"
                    }
                }
            }
        },
        "/personne": {
            "get": {
                "tags": [
                    "personne"
                ],
                "summary": "Get a person list",
                "description": "Use this method to return a listing of persons.",
                "operationId": "listPersonne",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Personne"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "personne"
                ],
                "summary": "Create a person",
                "description": "Use this method to create a new person.",
                "operationId": "createPerson",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the person",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "prenom",
                        "in": "formData",
                        "description": "Firstname of the person",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "date_naissance",
                        "in": "formData",
                        "description": "Date of birth of the person",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "formData",
                        "description": "Email of the person",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "Address of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "zipcode of the person",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "city of the person",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "country of the person",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Person created",
                        "schema": {
                            "$ref": "#/definitions/Personne"
                        }
                    },
                    "422": {
                        "description": "Champs manquant obligatoire ou incorrect"
                    }
                }
            }
        },
        "/personne/{id_personne}": {
            "get": {
                "tags": [
                    "personne"
                ],
                "summary": "Display a single person",
                "description": "Use this method to return a single person attributes based on its id.",
                "operationId": "showPerson",
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "id of person to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Personne"
                        }
                    },
                    "404": {
                        "description": "Person not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "personne"
                ],
                "summary": "Update a person",
                "description": "Use this method to update the attributes of a person based on its id.",
                "operationId": "updatePerson",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "ID person",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "prenom",
                        "in": "formData",
                        "description": "Firstname of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "date_naissance",
                        "in": "formData",
                        "description": "Date of birth of the person",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "formData",
                        "description": "Email of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "Address of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "zipcode of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "city of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "country of the person",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person updated",
                        "schema": {
                            "$ref": "#/definitions/Personne"
                        }
                    },
                    "422": {
                        "description": "Champs manquants obligatoires ou incorrects"
                    }
                }
            },
            "delete": {
                "tags": [
                    "personne"
                ],
                "summary": "Delete a Person",
                "description": "Use this method to delete a person based on its id.",
                "operationId": "deletePerson",
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "Person ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Person deleted"
                    },
                    "404": {
                        "description": "Invalid person value"
                    }
                }
            }
        },
        "/reduction": {
            "get": {
                "tags": [
                    "reduction"
                ],
                "summary": "Get a reduction list",
                "description": "Use this method to return a listing of reductions.",
                "operationId": "listReduction",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "204": {
                        "description": "The request didn't return any content."
                    }
                }
            },
            "post": {
                "tags": [
                    "reduction"
                ],
                "summary": "Create a reduction",
                "description": "Use this method to create a reduction",
                "operationId": "createReduction",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the reduction",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "date_debut",
                        "in": "formData",
                        "description": "Initial date of the reduction",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_fin",
                        "in": "formData",
                        "description": "Final date of the reduction",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "pourcentage_reduction",
                        "in": "formData",
                        "description": "Percentage of the reduction",
                        "required": true,
                        "type": "number",
                        "maximum": "11"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Reduction created",
                        "schema": {
                            "$ref": "#/definitions/Reduction"
                        }
                    },
                    "422": {
                        "description": "Required fields missing or incorrect"
                    }
                }
            }
        },
        "/reduction/{id_reduction}": {
            "get": {
                "tags": [
                    "reduction"
                ],
                "summary": "Display a single reduction",
                "description": "Use this method to return a single reduction attributes based on its id.",
                "operationId": "showReduction",
                "parameters": [
                    {
                        "name": "id_reduction",
                        "in": "path",
                        "description": "id of reduction to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Reduction"
                        }
                    },
                    "404": {
                        "description": "Reduction not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "reduction"
                ],
                "summary": "Update a reduction",
                "description": "Use this method to update the attributes of a reductionbased on its id.",
                "operationId": "updateReduction",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_reduction",
                        "in": "path",
                        "description": "ID reduction",
                        "required": true,
                        "type": "integer",
                        "maximum": "11"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the reduction",
                        "required": false,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "date_debut",
                        "in": "formData",
                        "description": "Initial date of the reduction",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "date_fin",
                        "in": "formData",
                        "description": "Final date of the reduction",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pourcentage_reduction",
                        "in": "formData",
                        "description": "Percentage of the reduction",
                        "required": false,
                        "type": "number",
                        "maximum": "11"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reduction updated",
                        "schema": {
                            "$ref": "#/definitions/Reduction"
                        }
                    },
                    "422": {
                        "description": "Required fields missing or incorrect"
                    }
                }
            },
            "delete": {
                "tags": [
                    "reduction"
                ],
                "summary": "Delete a reduction",
                "description": "Use this method to delete a reduction based on its id.",
                "operationId": "deleteReduction",
                "parameters": [
                    {
                        "name": "id_reduction",
                        "in": "path",
                        "description": "Reduction ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reduction deleted"
                    },
                    "404": {
                        "description": "Invalid reduction value"
                    }
                }
            }
        },
        "/salle": {
            "get": {
                "tags": [
                    "salle"
                ],
                "summary": "Display a listing of rooms.",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Salle"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "salle"
                ],
                "summary": "Create a room",
                "description": "Use this method to create a room",
                "operationId": "createRoom",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom_salle",
                        "in": "formData",
                        "description": "Nom de la salle",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "etage_salle",
                        "in": "formData",
                        "description": "Nombre d'\u00e9tages de la salle",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "places",
                        "in": "formData",
                        "description": "Nombre de places",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Room created",
                        "schema": {
                            "$ref": "#/definitions/Genre"
                        }
                    },
                    "422": {
                        "description": "Champ manquant obligatoire ou incorrect"
                    }
                }
            }
        },
        "/salle/{id_salle}": {
            "get": {
                "tags": [
                    "salle"
                ],
                "summary": "Display a single room",
                "description": "Use this method to return a single room attributes based on its id.",
                "operationId": "showRoom",
                "parameters": [
                    {
                        "name": "id_salle",
                        "in": "path",
                        "description": "id of room to fetch",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Salle"
                        }
                    },
                    "404": {
                        "description": "Room not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "salle"
                ],
                "summary": "Update a room",
                "description": "Use this method to update the attributes of a room",
                "operationId": "updateRoom",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "nom_salle",
                        "in": "path",
                        "description": "Room ID",
                        "type": "string"
                    },
                    {
                        "name": "nom_salle",
                        "in": "formData",
                        "description": "Room's name",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "etage_salle",
                        "in": "formData",
                        "description": "Rooms' floor number",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "places",
                        "in": "formData",
                        "description": "Rooms' seats number",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room created",
                        "schema": {
                            "$ref": "#/definitions/Salle"
                        }
                    },
                    "422": {
                        "description": "Champ manquant obligatoire ou incorrect"
                    }
                }
            },
            "delete": {
                "tags": [
                    "salle"
                ],
                "summary": "Delete a room",
                "description": "Use this method to delete a room based on its id.",
                "operationId": "deleteRoom",
                "parameters": [
                    {
                        "name": "id_salle",
                        "in": "path",
                        "description": "Room ID to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Room deleted"
                    },
                    "404": {
                        "description": "Invalid room ID"
                    }
                }
            }
        },
        "/seance": {
            "get": {
                "tags": [
                    "seance"
                ],
                "summary": "Display a listing of seances.",
                "operationId": "indexSeance",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Seance"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "seance"
                ],
                "summary": "Create a seance",
                "description": "Use this method to create a seance",
                "operationId": "storeSeance",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "formData",
                        "description": "Movie ID",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_salle",
                        "in": "formData",
                        "description": "Room ID",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_personne_ouvreur",
                        "in": "formData",
                        "description": "Room ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_personne_technicien",
                        "in": "formData",
                        "description": "Technician guy ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_personne_menage",
                        "in": "formData",
                        "description": "Cleaning guy ID",
                        "type": "integer"
                    },
                    {
                        "name": "debut_seance",
                        "in": "formData",
                        "description": "Starting time",
                        "required": true,
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "fin_seance",
                        "in": "formData",
                        "description": "Ending time",
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Seance created",
                        "schema": {
                            "$ref": "#/definitions/Seance"
                        }
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            }
        },
        "/seance/{id_seance}": {
            "get": {
                "tags": [
                    "seance"
                ],
                "summary": "Display a single seance",
                "description": "Use this method to return a single seance attributes based on its id.",
                "operationId": "showSeance",
                "parameters": [
                    {
                        "name": "id_seance",
                        "in": "path",
                        "description": "Seance ID",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Seance"
                        }
                    },
                    "404": {
                        "description": "Seance not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "seance"
                ],
                "summary": "Update a seance",
                "description": "Use this method to update the attributes of a seance based on its id.",
                "operationId": "updateSeance",
                "consumes": [
                    "multipart/form-data",
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id_seance",
                        "in": "path",
                        "description": "Seance ID",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_film",
                        "in": "formData",
                        "description": "Movie ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_salle",
                        "in": "formData",
                        "description": "Room ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_personne_ouvreur",
                        "in": "formData",
                        "description": "Opener ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_personne_technicien",
                        "in": "formData",
                        "description": "Technician ID",
                        "type": "integer"
                    },
                    {
                        "name": "id_personne_menage",
                        "in": "formData",
                        "description": "Cleaning ID",
                        "type": "integer"
                    },
                    {
                        "name": "debut_seance",
                        "in": "formData",
                        "description": "Starting time",
                        "type": "string",
                        "maximum": "255"
                    },
                    {
                        "name": "fin_seance",
                        "in": "formData",
                        "description": "Ending time",
                        "type": "string",
                        "maximum": "255"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seance updated",
                        "schema": {
                            "$ref": "#/definitions/Seance"
                        }
                    },
                    "422": {
                        "description": "Missing or incorrect fields"
                    }
                }
            },
            "delete": {
                "tags": [
                    "seance"
                ],
                "summary": "Delete a seance",
                "description": "Use this method to delete a seance based on its id.",
                "operationId": "destroySeance",
                "parameters": [
                    {
                        "name": "id_seance",
                        "in": "path",
                        "description": "Seance ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seance deleted"
                    },
                    "404": {
                        "description": "Seance not found"
                    }
                }
            }
        },
        "/seance/film/{id_film}": {
            "get": {
                "tags": [
                    "seance"
                ],
                "summary": "Display next seances by film id",
                "description": "Use this method to return a listing of next seances based on film id and dates.",
                "operationId": "getSeancesByIdFilm",
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Film ID",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "date_debut",
                        "in": "query",
                        "description": "Starting time",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "date_fin",
                        "in": "query",
                        "description": "Ending time",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Seance"
                            }
                        }
                    },
                    "204": {
                        "description": "Successful operation but there isn't seance with this film or dates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Seance"
                            }
                        }
                    },
                    "404": {
                        "description": "Film not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "Abonnement": {
            "required": [
                "id_forfait",
                "debut"
            ],
            "properties": {
                "id_forfait": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "debut": {
                    "type": "date",
                    "format": "date",
                    "default": "2015-01-01"
                }
            },
            "xml": {
                "name": "Abonnement"
            }
        },
        "Distributeur": {
            "required": [
                "nom",
                "telephone"
            ],
            "properties": {
                "id_distributeur": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "gimages"
                },
                "telephone": {
                    "type": "string",
                    "format": "string",
                    "default": "146952611"
                },
                "adresse": {
                    "type": "string",
                    "format": "string",
                    "default": "55 rue du faubourg Saint-Honor\u00e9"
                },
                "cpostal": {
                    "type": "string",
                    "format": "string",
                    "default": "75008"
                },
                "ville": {
                    "type": "string",
                    "format": "string",
                    "default": "Paris"
                },
                "pays": {
                    "type": "string",
                    "format": "string",
                    "default": "France"
                }
            },
            "xml": {
                "name": "Distributeur"
            }
        },
        "Employe": {
            "required": [
                "id_personne",
                "id_fonction"
            ],
            "properties": {
                "id_employe": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_personne": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_fonction": {
                    "type": "number",
                    "format": "int64",
                    "default": 6
                }
            },
            "xml": {
                "name": "Employe"
            }
        },
        "Film": {
            "required": [
                "titre"
            ],
            "properties": {
                "id_film": {
                    "type": "number",
                    "format": "int64",
                    "default": 3451
                },
                "id_genre": {
                    "type": "number",
                    "format": "int64",
                    "default": 17
                },
                "id_distributeur": {
                    "type": "number",
                    "format": "int64",
                    "default": 70
                },
                "titre": {
                    "type": "string",
                    "format": "string",
                    "default": "Hostel: Part II"
                },
                "resum": {
                    "type": "string",
                    "format": "string",
                    "default": "Three young women are lured into a Slovakian hostel.  Once there, they are subjected to all kinds of torture and hell...  Can they escape?"
                },
                "date_debut_affiche": {
                    "type": "date",
                    "format": "date",
                    "default": "2007-06-29"
                },
                "date_fin_affiche": {
                    "type": "date",
                    "format": "date",
                    "default": "2007-07-20"
                },
                "duree_minutes": {
                    "type": "number",
                    "format": "int64",
                    "default": 94
                },
                "annee_production": {
                    "type": "number",
                    "format": "int64",
                    "default": 2007
                }
            },
            "xml": {
                "name": "Film"
            }
        },
        "Fonction": {
            "required": [
                "nom",
                "salaire",
                "cadre"
            ],
            "properties": {
                "id_fonction": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "g\u00e9rant"
                },
                "salaire": {
                    "type": "string",
                    "format": "string",
                    "default": "60000"
                },
                "cadre": {
                    "type": "tinyint",
                    "format": "int64",
                    "default": 1
                }
            },
            "xml": {
                "name": "Fonction"
            }
        },
        "Forfait": {
            "required": [
                "nom",
                "resum",
                "prix",
                "duree_jours"
            ],
            "properties": {
                "id_forfait": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "Forfait 1"
                },
                "resum": {
                    "type": "string",
                    "format": "string",
                    "default": "R\u00e9sum\u00e9 du forfait 1"
                },
                "prix": {
                    "type": "number",
                    "format": "int64",
                    "default": 15
                },
                "duree_jours": {
                    "type": "number",
                    "format": "int64",
                    "default": 3
                }
            },
            "xml": {
                "name": "Forfait"
            }
        },
        "Genre": {
            "required": [
                "nom"
            ],
            "properties": {
                "id_genre": {
                    "type": "number",
                    "format": "int64",
                    "default": 25
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "erotic"
                }
            },
            "xml": {
                "name": "Genre"
            }
        },
        "HistoriqueMembre": {
            "required": [
                "id_membre",
                "id_seance",
                "date"
            ],
            "properties": {
                "id_historique": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_membre": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_seance": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "date": {
                    "type": "date",
                    "format": "date",
                    "default": "2015-08-17"
                }
            },
            "xml": {
                "name": "HistoriqueMembre"
            }
        },
        "Membre": {
            "required": [
                "id_personne",
                "id_abonnement",
                "date_inscription",
                "debut_abonnement"
            ],
            "properties": {
                "id_membre": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_personne": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_abonnement": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "date_inscription": {
                    "type": "date",
                    "format": "date",
                    "default": "2015-08-17"
                },
                "debut_abonnement": {
                    "type": "date",
                    "format": "date",
                    "default": "2015-09-01"
                }
            },
            "xml": {
                "name": "Membre"
            }
        },
        "Personne": {
            "required": [
                "nom",
                "prenom",
                "date_naissance",
                "email",
                "cpostal",
                "ville",
                "pays"
            ],
            "properties": {
                "id_personne": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "SOLEVIC"
                },
                "prenom": {
                    "type": "string",
                    "format": "string",
                    "default": "alexis"
                },
                "date_naissance": {
                    "type": "date",
                    "format": "date",
                    "default": "1997-01-05"
                },
                "email": {
                    "type": "string",
                    "format": "string",
                    "default": "solevic.alexis@lycos.fr"
                },
                "adresse": {
                    "type": "string",
                    "format": "string",
                    "default": "1 rue Ketanou"
                },
                "cpostal": {
                    "type": "string",
                    "format": "string",
                    "default": "94170"
                },
                "ville": {
                    "type": "string",
                    "format": "string",
                    "default": "LE PERREUX SUR MARNE"
                },
                "pays": {
                    "type": "string",
                    "format": "string",
                    "default": "France"
                }
            },
            "xml": {
                "name": "Personne"
            }
        },
        "Reduction": {
            "required": [
                "nom",
                "date_debut",
                "date_fin",
                "pourcentage_reduction"
            ],
            "properties": {
                "id_reduction": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "Reduction 1"
                },
                "date_debut": {
                    "type": "date",
                    "format": "date",
                    "default": "2016-01-01"
                },
                "date_fin": {
                    "type": "date",
                    "format": "date",
                    "default": "2016-02-01"
                },
                "pourcentage_reduction": {
                    "type": "number",
                    "format": "int64",
                    "default": 20
                }
            },
            "xml": {
                "name": "Reduction"
            }
        },
        "Salle": {
            "required": [
                "numero_salle",
                "nom_salle",
                "etage_salle",
                "places"
            ],
            "properties": {
                "id_salle": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "numero_salle": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom_salle": {
                    "type": "string",
                    "format": "string",
                    "default": "Martin Scorsese"
                },
                "etage_salle": {
                    "type": "number",
                    "format": "int64",
                    "default": 0
                },
                "places": {
                    "type": "number",
                    "format": "int64",
                    "default": 135
                }
            },
            "xml": {
                "name": "Salle"
            }
        },
        "Seance": {
            "required": [
                "id_film",
                "id_salle",
                "id_personne_ouvreur",
                "id_personne_technicien",
                "id_personne_menage",
                "debut_seance",
                "fin_seance"
            ],
            "properties": {
                "id": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_film": {
                    "type": "number",
                    "format": "int64",
                    "default": 112
                },
                "id_salle": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_personne_ouvreur": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_personne_technicien": {
                    "type": "number",
                    "format": "int64",
                    "default": 2
                },
                "id_personne_menage": {
                    "type": "number",
                    "format": "int64",
                    "default": 3
                },
                "debut_seance": {
                    "type": "date",
                    "format": "date",
                    "default": "2016-04-04 10:25:00"
                },
                "fin_seance": {
                    "type": "date",
                    "format": "date",
                    "default": "2016-04-04 12:05:00"
                }
            },
            "xml": {
                "name": "Seance"
            }
        }
    }
}